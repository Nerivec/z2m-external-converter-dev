import { Buffalo } from '../../buffalo';
import { BuffaloZclDataType, DataType } from './definition/enums';
import { BuffaloZclOptions } from './definition/tstype';
export interface GPDChannelConfiguration {
    commandID: number;
    operationalChannel: number;
    basic: boolean;
}
export interface GPDCommissioningReply {
    commandID: number;
    options: number;
    /** expected valid if corresponding `options` bits set */
    panID?: number;
    /** expected valid if corresponding `options` bits set */
    securityKey?: Buffer;
    /** expected valid if corresponding `options` bits set */
    keyMic?: number;
    /** expected valid if corresponding `options` bits set */
    frameCounter?: number;
}
export declare class BuffaloZcl extends Buffalo {
    private writeOctetStr;
    private readOctetStr;
    private writeCharStr;
    private readCharStr;
    private writeLongOctetStr;
    private readLongOctetStr;
    private writeLongCharStr;
    private readLongCharStr;
    private writeArray;
    private readArray;
    private writeStruct;
    private readStruct;
    private writeToD;
    private readToD;
    private writeDate;
    private readDate;
    private writeListZoneInfo;
    private readListZoneInfo;
    private writeExtensionFieldSets;
    private readExtensionFieldSets;
    private writeListThermoTransitions;
    private readListThermoTransitions;
    private writeGpdFrame;
    private readGpdFrame;
    private writeStructuredSelector;
    private readStructuredSelector;
    private writeListTuyaDataPointValues;
    private readListTuyaDataPointValues;
    private writeListMiboxerZones;
    private readListMiboxerZones;
    private writeBigEndianUInt24;
    private readBigEndianUInt24;
    private readMiStruct;
    write(type: DataType | BuffaloZclDataType, value: any, options: BuffaloZclOptions): void;
    read(type: DataType | BuffaloZclDataType, options: BuffaloZclOptions): any;
}
//# sourceMappingURL=buffaloZcl.d.ts.map