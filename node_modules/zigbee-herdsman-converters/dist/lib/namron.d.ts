import * as modernExtend from "./modernExtend";
import type { Fz, KeyValue, Tz } from "./types";
export declare const fromZigbee: {
    namron_edge_thermostat_vacation_date: {
        cluster: string;
        type: string[];
        convert: (model: import("./types").Definition, msg: Fz.Message, publish: import("./types").Publish, options: KeyValue, meta: Fz.Meta) => KeyValue;
    };
    namron_edge_thermostat_holiday_temp: {
        cluster: string;
        type: string[];
        convert: (model: import("./types").Definition, msg: Fz.Message, publish: import("./types").Publish, options: KeyValue, meta: Fz.Meta) => KeyValue;
    };
};
export declare const toZigbee: {
    namron_edge_thermostat_vacation_date: {
        key: string[];
        convertGet: (entity: import("zigbee-herdsman/dist/controller/model").Group | import("zigbee-herdsman/dist/controller/model").Endpoint, key: string, meta: Tz.Meta) => Promise<void>;
        convertSet: (entity: import("zigbee-herdsman/dist/controller/model").Group | import("zigbee-herdsman/dist/controller/model").Endpoint, key: string, value: unknown, meta: Tz.Meta) => Promise<void>;
    };
    namron_edge_thermostat_holiday_temp: {
        key: string[];
        convertSet: (entity: import("zigbee-herdsman/dist/controller/model").Group | import("zigbee-herdsman/dist/controller/model").Endpoint, key: string, value: unknown, meta: Tz.Meta) => Promise<void>;
        convertGet: (entity: import("zigbee-herdsman/dist/controller/model").Group | import("zigbee-herdsman/dist/controller/model").Endpoint, key: string, meta: Tz.Meta) => Promise<void>;
    };
};
export declare const edgeThermostat: {
    windowOpenDetection: (args?: Partial<modernExtend.BinaryArgs>) => import("./types").ModernExtend;
    antiFrost: (args?: Partial<modernExtend.BinaryArgs>) => import("./types").ModernExtend;
    summerWinterSwitch: (args?: Partial<modernExtend.BinaryArgs>) => import("./types").ModernExtend;
    vacationMode: (args?: Partial<modernExtend.BinaryArgs>) => import("./types").ModernExtend;
    timeSync: (args?: Partial<modernExtend.BinaryArgs>) => import("./types").ModernExtend;
    autoTime: (args?: Partial<modernExtend.BinaryArgs>) => import("./types").ModernExtend;
    displayActiveBacklight: (args?: Partial<modernExtend.NumericArgs>) => import("./types").ModernExtend;
    regulatorPercentage: (args?: Partial<modernExtend.NumericArgs>) => import("./types").ModernExtend;
    regulationMode: (args?: Partial<modernExtend.EnumLookupArgs>) => import("./types").ModernExtend;
    displayAutoOff: (args?: Partial<modernExtend.EnumLookupArgs>) => import("./types").ModernExtend;
    sensorMode: (args?: Partial<modernExtend.EnumLookupArgs>) => import("./types").ModernExtend;
    boostTime: (args?: Partial<modernExtend.EnumLookupArgs>) => import("./types").ModernExtend;
    systemMode: (args?: Partial<modernExtend.EnumLookupArgs>) => import("./types").ModernExtend;
    deviceTime: (args?: Partial<modernExtend.NumericArgs>) => import("./types").ModernExtend;
    absMinHeatSetpointLimitF: (args?: Partial<modernExtend.NumericArgs>) => import("./types").ModernExtend;
    absMaxHeatSetpointLimitF: (args?: Partial<modernExtend.NumericArgs>) => import("./types").ModernExtend;
    absMinCoolSetpointLimitF: (args?: Partial<modernExtend.NumericArgs>) => import("./types").ModernExtend;
    absMaxCoolSetpointLimitF: (args?: Partial<modernExtend.NumericArgs>) => import("./types").ModernExtend;
    occupiedCoolingSetpointF: (args?: Partial<modernExtend.NumericArgs>) => import("./types").ModernExtend;
    occupiedHeatingSetpointF: (args?: Partial<modernExtend.NumericArgs>) => import("./types").ModernExtend;
    localTemperatureF: (args?: Partial<modernExtend.NumericArgs>) => import("./types").ModernExtend;
    readOnly: {
        windowState: (args?: Partial<modernExtend.BinaryArgs>) => import("./types").ModernExtend;
        deviceFault: (args?: Partial<modernExtend.EnumLookupArgs>) => import("./types").ModernExtend;
        workDays: (args?: Partial<modernExtend.EnumLookupArgs>) => import("./types").ModernExtend;
        boostTimeRemaining: (args?: Partial<modernExtend.NumericArgs>) => import("./types").ModernExtend;
    };
};
//# sourceMappingURL=namron.d.ts.map